{
module Ferry.Front.Data.Language where
	
import Ferry.Front.Data.Meta

data BinOp = Add -- +
           | Sub -- -
           | Mul -- *
           | Div -- /
           | Mod -- %
           | Pow -- ^

data Const = CInt Int
		   | CFloat Float
		   | CBool Bool
		   | CString String
}

data Expr
    | Op           m::{Meta} o::BinOp
    | Const        m::{Meta} c::Const
    | Var          m::{Meta} x::String
	| PrimFn       m::{Meta} f::String
	| Abstr        m::{Meta} x::Pattern e::Expr
    | App	       m::{Meta} e1::Expr e2::Expr
    | If           m::{Meta} e1::Expr e2::Expr e3::Expr
    | Record       m::{Meta} els::RecElems
    | Paren        m::{Meta} e::Expr
    | List         m::{Meta} es::Exprs
    | Elem         m::{Meta} i::{Either String Int}
    | Let          m::{Meta} bs::Bindings e::Expr
    | Table        m::{Meta} n::String cs::Columns ks::Keys
    | Relationship m::{Meta} a1::Arity e1::Expr a2::Arity e2::Expr k1::Key k2::Key
	| For          m::{Meta} p::Pattern e1::Expr bd::ForElems er::Expr

data ForElem
    | FLet   m::{Meta} x::String e::Expr
    | FWhere m::{Meta} e::Expr
    | Fgroup m::{Meta} es::Exprs
    | FOrder m::{Meta} es::ExprOrders

data ExprOrder
	| ExprOrder m::{Meta} e::Expr o::Order

data Pattern
    | PVar  m::{Meta} x::String
	| PPat  m::{Meta} xs::{[String]}

data Order
    | Ascending m::{Meta}
    | Descending m::{Meta}
	
data Arity
    | One m::{Meta}
    | Many m::{Meta}

data Key
    | Key m::{Meta} s::{[String]}

data Column
    | Column m::{Meta} n::String t::Type

data Binding
    | Binding m::{Meta} x::String e::Expr

data RecElem
    | TrueRec m::{Meta} i::String e::Expr
    | TuplRec m::{Meta} i::Int    e::Expr

type RecElems = [RecElem]
type Exprs = [Expr]
type Bindings = [Binding]
type Columns = [Column]
type Keys = [Key]
type ExprOrders = [ExprOrder]

data Type
	| Int m::{Meta}
