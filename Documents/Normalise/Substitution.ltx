\section{Substitutions}

A substitution | subst | is a mapping from a variable name to a different variable name. A substitution |subst x| is only applied if and only if |x In dom(subst)|. If |x NotIn dom(subst)| then |subst x = x|.  |subst/s| denotes the substitution |subst| where the elements of |s| are removed from |dom(subst)|. 
|dom(subst)/s == dom(subst/s)| 

\begin{code}
    subst c              =  c
    subst x              =  (subst x)           x In dom(subst)
                            x                   otherwise
    subst (e1, ..., en)  =  (subst e1, ..., subst en)
    subst {b1, ..., bn}  =  {subst b1, ..., subst bn}
    subst [e1, ..., en]  =  [subst e1, ..., subst en]
    subst table T (col1,..., coln) with keys (k1, ..., kn)
                         =  table T (col1,..., coln) with keys (k1, ..., kn)
    subst e.p            =  (subst e).p
    subst e.n            =  (subst e).n
    subst e1 op e2       =  (subst e1) op (subst e2)
    subst op e           =  op (subst e)
    subst (e arg1 ... argn)
                         =  (subst e) (subst arg1) ... (subst argn)
    subst let x1 = e1 in e2
                         =  let x1 = subst e1 in subst/{x1} e2
    subst let x1 = e1, x2 = e2, ..., xn = en in er
                         =  let x1 = subst e1, x2 = subst/{x1} e2, ..., xn = subst/{x1,...,xn1} en in subst/{x1,..., xn} er 
    subst (e)            =  subst e
    subst if e1 then e2 else e3
                         =  if subst e1 then subst e2 else subst e3
    subst relationship car1 e1 to car2 e2 by k1 eq k2
                         = relationship car1 (subst e1) to car2 (subst e2) by k1 eq k2
    subst for (v1,..., vn) in e1, ..., (x1, ..., xm) in eo rest
                         = for (v1, ..., vn) in subst e1, ..., (x1, ..., xm) in subst/{v1, ..., vn, ...} eo subst/{v1, ..., vn, ..., x1, ..., xm} rest
\end{code}

Substitution on body and return of comprehension:

\begin{code}
subst ((for (x1, ..., xn) in e1):xs)  
                                      =  for (x1, ..., xn) in subst e1 : (subst/{x1,..., xn} xs)
subst ((where e2):xs)                 
                                      =  where subst e2 : subst xs
subst ((let x1 = e1, ..., xn = en):xs)
                                      =  let x1 = subst e1, ..., xn = subst/{x1, ..., xn1} en: subst/{x1,..., xn} xs
subst (order by e1 [ord1], ..., en [ordn]:xs)
                                      = order by subst e1 ord1, ..., subst en [ordn]: subst xs
subst (group [ev] (by|with) ek1, ..., ekn [into (x1, ..., xn)]:xs)
                                      = group [subst ev] (by|with) subst ek1, ..., subst ekn [into (x1, ..., xn)] : subst/{x1, ..., xn} xs
subst [return p]                      = return p
subst [return e2]                     = return subst e2
subst [return e2 into (x1,..., xn) rest] = return subst e2 into (x1, ..., xn) subst/{x1,..., xn} rest
\end{code}

Substitution on bindings:
\begin{code}
    subst v = e     = v = subst e
    subst v         = v
    subst e.v       = (subst e).v
\end{code}

Substitution on arguments:
\begin{code}
    subst e                    =  subst e
    subst ((x1,..., xn) -> e)  =  ((x1, ..., xn) -> subst/{x1, ..., xn} e)
\end{code}
