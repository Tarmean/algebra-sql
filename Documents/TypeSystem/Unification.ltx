\section{Unification}

\begin{code}
  U ::  (Type                         ,Type)             ->  Substitution
  U     (TyInt                        , TyInt)            =  id
  U     (TyFloat                      , TyFloat)          =  id
  U     (TyBool                       , TyBool)           =  id
  U     (TyString                     , TyString)         =  id
  U     ([t1]                         , [t2])             =  U(t1, t2)
  U     (t11 -> t12                   , t21 -> t22)       =  let  subst1   = U(t11, t21)
                                                                  subst2   = U(subst1 t12, subst1 t22)
                                                              in  subst2 . subst1
  U     ({x1 :: t1, ... xn :: tn}     , {y1 :: t1', ..., yn :: tn'})
                                                          =  if  (x1 == y1 && ... && xn == yn)
                                                                 then let  subst1 = U(t1, t1')
                                                                           ...
                                                                           substn = U(substn1 ... subst1 tn, substn1 ... subst1 tn')
                                                                       in  substn . ... . subst1
                                                                 else  fail
  U     (t                            , a)                =  if (t == a Or a `S.notMember` (ftv t) ) 
                                                              then [a +-> t]
                                                              else fail
  U     (a                            , t)                =  if (t == a Or a `S.notMember` (ftv t) ) 
                                                              then [a +-> t]
                                                              else fail
  U     (_                            , _)                =  fail
\end{code}